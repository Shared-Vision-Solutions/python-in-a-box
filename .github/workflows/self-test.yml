name: Python In A Box Self Test

# Required Github Repository Secrets:
# REMOTE_TOKEN      - Github Token With Access To This Repo
# REMOTE_ORIGIN     - The git remote repository name
# SLACK_WEBHOOK     - The slack webhook for build notifications

on:
  push:
  schedule:
    - cron: "0 6 * * 1"
  workflow_dispatch:

jobs:

  container_cli_test:

    runs-on: ubuntu-latest
    strategy:
      max-parallel: 4
      matrix:
        python-version: [3.7]

    steps:
    - uses: actions/checkout@v2
      with:
        path: 'template'
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v1
      with:
        python-version: ${{ matrix.python-version }}
    - name: Requirements
      run: |
        pip install cookiecutter
    - name: Create Template
      run: |
        git config --global user.email "somedude@coolstartup.com"
        git config --global user.name "Pro Buddy Dev"
        echo -e '\n\n\n\n\n\nfalse\nfalse\nfalse\n' | cookiecutter template/
    - name: Setup Environment
      run: |
        BRANCH_OR_TAG="$(echo "${GITHUB_REF}" | sed 's/refs\/heads\///g' | sed 's/refs\/tags\///g')"
        echo "BRANCH_OR_TAG=${BRANCH_OR_TAG}" >> $GITHUB_ENV
        echo "VALID_RELEASE=not_a_validated_release" >> $GITHUB_ENV
    - name: Ensure File System is Writable by the Container
      run: |
        chmod -R 777 mmmm_cookies
    - name: Build Docker Image, Start Container
      run: |
        cd mmmm_cookies
        docker-compose build
        docker-compose up -d
        sleep 1
    - name: Test Build Documentation
      run: |
        cd mmmm_cookies
        docker-compose exec -T mmmm_cookies bash -l -c 'dev build-docs'
    - name: Test Build Wheel
      run: |
        cd mmmm_cookies
        docker-compose exec -T mmmm_cookies bash -l -c 'dev build-wheel'
    - name: Test the Coverage Command
      run: |
        cd mmmm_cookies
        docker-compose exec -T mmmm_cookies bash -l -c 'dev coverage'
    - name: Test the Fmt Command
      run: |
        cd mmmm_cookies
        docker-compose exec -T mmmm_cookies bash -l -c 'dev fmt'
    - name: Test the Lint Command
      run: |
        cd mmmm_cookies
        docker-compose exec -T mmmm_cookies bash -l -c 'dev lint'
    - name: Test the Reinstall Requirements Command
      run: |
        cd mmmm_cookies
        docker-compose exec -T mmmm_cookies bash -l -c 'dev reinstall-requirements'
    - name: Test the Sectest Command
      run: |
        cd mmmm_cookies
        docker-compose exec -T mmmm_cookies bash -l -c 'dev sectest'
    - name: Test the Setup Command
      run: |
        cd mmmm_cookies
        docker-compose exec -T mmmm_cookies bash -l -c 'dev setup'
    - name: Test the Setup Bash Command
      run: |
        cd mmmm_cookies
        docker-compose exec -T mmmm_cookies bash -l -c 'dev setup-bash'
    - name: Test the Test Command
      run: |
        cd mmmm_cookies
        docker-compose exec -T mmmm_cookies bash -l -c 'dev test'
    - name: Test Priviledge Escalation
      run: |
        cd mmmm_cookies
        docker-compose exec -T mmmm_cookies bash -l -c 'sudo ls -la /root'
    - name: Report Job Status on Success
      run: |
        MSG="{\"text\":\"python-in-a-box:${BRANCH_OR_TAG}: container build succeeded!\"}"
        curl -X POST -H 'Content-type: application/json' --data "${MSG}"  "${WEBHOOK_URL}"
      env:
        WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}
    - name: Report Job Status on Failure
      if: ${{ failure() }}
      run: |
        MSG="{\"text\":\"python-in-a-box:${BRANCH_OR_TAG}: container build failed!\"}"
        curl -X POST -H 'Content-type: application/json' --data "${MSG}"  "${WEBHOOK_URL}"
      env:
       WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}

  hostmachine_cli_test:

    runs-on: ubuntu-latest
    strategy:
      max-parallel: 4
      matrix:
        python-version: [3.7]

    steps:
    - uses: actions/checkout@v2
      with:
        path: 'template'
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v1
      with:
        python-version: ${{ matrix.python-version }}
    - name: Requirements
      run: |
        sudo apt-get install -y golang-github-pelletier-go-toml
        pip install cookiecutter poetry
    - name: Create Template
      run: |
        git config --global user.email "somedude@coolstartup.com"
        git config --global user.name "Pro Buddy Dev"
        echo -e '\n\n\n\n\n\nfalse\nfalse\nfalse\n' | cookiecutter template/
    - name: Setup Environment
      run: |
        cd mmmm_cookies
        BRANCH_OR_TAG="$(echo "${GITHUB_REF}" | sed 's/refs\/heads\///g' | sed 's/refs\/tags\///g')"
        ROOT="$(git rev-parse --show-toplevel)"
        echo "BRANCH_OR_TAG=${BRANCH_OR_TAG}" >> $GITHUB_ENV
        echo "PROJECT_NAME=mmmm_cookies" >> $GITHUB_ENV
        echo "PIB_CONFIG_FILE_LOCATION=${ROOT}/assets/cli.yml" >> $GITHUB_ENV
    - name: Install Hostmachine Scripts
      run: |
        cd mmmm_cookies
        ./scripts/hostmachine.sh
    - name: Test Build Documentation
      run: |
        cd mmmm_cookies
        source "$(poetry env info --path)/bin/activate"
        dev build-docs
    - name: Test Build Wheel
      run: |
        cd mmmm_cookies
        source "$(poetry env info --path)/bin/activate"
        dev build-wheel
    - name: Test the Coverage Command
      run: |
        cd mmmm_cookies
        source "$(poetry env info --path)/bin/activate"
        dev coverage
    - name: Test the Fmt Command
      run: |
        cd mmmm_cookies
        source "$(poetry env info --path)/bin/activate"
        dev fmt
    - name: Test the Lint Command
      run: |
        cd mmmm_cookies
        source "$(poetry env info --path)/bin/activate"
        dev lint
    - name: Test the Reinstall Requirements Command
      run: |
        cd mmmm_cookies
        source "$(poetry env info --path)/bin/activate"
        dev reinstall-requirements
    - name: Test the Sectest Command
      run: |
        cd mmmm_cookies
        source "$(poetry env info --path)/bin/activate"
        dev sectest
    - name: Test the Setup Command
      run: |
        cd mmmm_cookies
        source "$(poetry env info --path)/bin/activate"
        dev setup
    - name: Test the Setup Bash Command
      run: |
        cd mmmm_cookies
        source "$(poetry env info --path)/bin/activate"
        dev setup-bash
    - name: Test the Test Command
      run: |
        cd mmmm_cookies
        source "$(poetry env info --path)/bin/activate"
        dev test
    - name: Test ShellCheck Passes
      run: |
        cd mmmm_cookies
        shellcheck scripts/*.sh
        shellcheck scripts/ci/*.sh
        shellcheck scripts/hooks/*
        shellcheck scripts/dev
    - name: Report Job Status on Success
      run: |
        MSG="{\"text\":\"python-in-a-box:${BRANCH_OR_TAG}: hostmachine build success!\"}"
        curl -X POST -H 'Content-type: application/json' --data "${MSG}"  "${WEBHOOK_URL}"
      env:
        WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}
    - name: Report Job Status on Failure
      if: ${{ failure() }}
      run: |
        MSG="{\"text\":\"python-in-a-box:${BRANCH_OR_TAG}: hostmachine build has failed!\"}"
        curl -X POST -H 'Content-type: application/json' --data "${MSG}" "${WEBHOOK_URL}"
      env:
       WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}

  push_repository_test:
    needs: [container_cli_test, hostmachine_cli_test]

    runs-on: ubuntu-latest
    strategy:
      max-parallel: 4
      matrix:
        python-version: [3.7]

    steps:
    - uses: actions/checkout@v2
      with:
        path: 'template'
        persist-credentials: false
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v1
      with:
        python-version: ${{ matrix.python-version }}
    - name: Requirements
      run: |
        pip install cookiecutter
    - name: Create Template
      run: |
        git config --global user.email "action@github.com"
        git config --global user.name "GitHub Action"
        echo -e '\n\n\n\n\n\nfalse\nfalse\nfalse\n' | cookiecutter template/
    - name: Setup Environment
      run: |
        BRANCH_OR_TAG="$(echo "${GITHUB_REF}" | sed 's/refs\/heads\///g' | sed 's/refs\/tags\///g')"
        echo "BRANCH_OR_TAG=${BRANCH_OR_TAG}" >> $GITHUB_ENV
        echo "VALID_RELEASE=not_a_validated_release" >> $GITHUB_ENV
    - name: Clean Up Tags for Git Push
      run: |
        cd mmmm_cookies
        git checkout master
        git tag --delete v0.0.0  # Don't Repush
        git tag v1.0.0
    - name: Push To Test Repository (develop)
      uses: ad-m/github-push-action@v0.6.0
      with:
        github_token: ${{ secrets.REMOTE_TOKEN }}
        branch: develop
        tags: false
        directory: mmmm_cookies
        repository: ${{ secrets.REMOTE_ORIGIN }}
        force: true
    - name: Push To Test Repository (master)
      uses: ad-m/github-push-action@v0.6.0
      with:
        github_token: ${{ secrets.REMOTE_TOKEN }}
        branch: master
        tags: false
        directory: mmmm_cookies
        repository: ${{ secrets.REMOTE_ORIGIN }}
        force: true
    - name: Push To Test Repository (release tag)
      uses: ad-m/github-push-action@v0.6.0
      with:
        github_token: ${{ secrets.REMOTE_TOKEN }}
        branch: master
        tags: true
        directory: mmmm_cookies
        repository: ${{ secrets.REMOTE_ORIGIN }}
        force: true
    - name: Report Job Status on Success
      run: |
        MSG="{\"text\":\"python-in-a-box:${BRANCH_OR_TAG}: trigger templated pipelines succeeded!\"}"
        curl -X POST -H 'Content-type: application/json' --data "${MSG}"  "${WEBHOOK_URL}"
      env:
        WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}
    - name: Report Job Status on Failure
      if: ${{ failure() }}
      run: |
        MSG="{\"text\":\"python-in-a-box:${BRANCH_OR_TAG}: trigger templated pipelines failed!\"}"
        curl -X POST -H 'Content-type: application/json' --data "${MSG}"  "${WEBHOOK_URL}"
      env:
        WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}

  create_releases:
    needs: [push_repository_test]

    runs-on: ubuntu-latest
    strategy:
      max-parallel: 4
      matrix:
        python-version: [ 3.7 ]

    steps:
      - uses: actions/checkout@v1
      - name: Setup Environment
        run: |
          BRANCH_OR_TAG="$(echo "${GITHUB_REF}" | sed 's/refs\/heads\///g' | sed 's/refs\/tags\///g')"
          echo "BRANCH_OR_TAG=${BRANCH_OR_TAG}" >> $GITHUB_ENV
          echo "VALID_RELEASE=not_a_validated_release" >> $GITHUB_ENV
      - name: Releases -- Detect A Release Tag
        if: contains(github.ref, '/tags/v') == true
        run: |
          VALID_RELEASE=$(git diff origin/master)
          echo 'VALID_RELEASE<<EOF' >> $GITHUB_ENV
          echo "${VALID_RELEASE}" >> $GITHUB_ENV
          echo 'EOF' >> $GITHUB_ENV
      - name: Releases -- Prepare Release Content
        if: contains(github.ref, '/tags/v') == true && env.VALID_RELEASE == ''
        run: |
          echo "{}" > package.json
      - name: Production -- Generate Changelog
        if: contains(github.ref, '/tags/v') == true && env.VALID_RELEASE == ''
        uses: scottbrenner/generate-changelog-action@master
        id: Changelog
        env:
          REPO: ${{ github.repository }}
      - name: Production -- Create Release
        if: contains(github.ref, '/tags/v') == true && env.VALID_RELEASE == ''
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.BRANCH_OR_TAG }}
          release_name: Release ${{ env.BRANCH_OR_TAG }}
          body: |
            ${{ steps.Changelog.outputs.changelog }}
          draft: true
          prerelease: false
      - name: Production -- Report Success
        if: contains(github.ref, '/tags/v') == true && env.VALID_RELEASE == ''
        run: |
          MSG="{\"text\":\"python-in-a-box:${BRANCH_OR_TAG}: automated release has been created!\"}"
          curl -X POST -H 'Content-type: application/json' --data "${MSG}"  "${WEBHOOK_URL}"
        env:
          WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}
      - name: Production -- Report Failure
        if: failure() == true && contains(github.ref, '/tags/v') == true && env.VALID_RELEASE == ''
        run: |
          MSG="{\"text\":\"python-in-a-box:${BRANCH_OR_TAG}: automated release has failed!\"}"
          curl -X POST -H 'Content-type: application/json' --data "${MSG}"  "${WEBHOOK_URL}"
        env:
          WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}
