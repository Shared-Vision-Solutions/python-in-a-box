name: {{cookiecutter.project_slug}} Automation

# Workflow Secrets:
# SLACK_WEBHOOK              (Required, for slack notifications...)
# DOCKER_USERNAME            (Optional, required for image pushing...)
# DOCKER_PASSWORD            (Optional, required for image pushing...)
# DOCKER_REPOSITORY          (Optional, non-dockerhub repository location)
# DOCKER_REPOSITORY_FOLDER   (Optional Subdivision of Repository, ie. gcr.io uses project ids)

on:
  push:
  schedule:
    - cron: "0 6 * * 1"
  workflow_dispatch:

jobs:
  build:

    runs-on: ubuntu-latest
    steps:

    - uses: actions/checkout@v1

    - name: Create Docker Mounted Content
      run: |
        echo | ssh-keygen
        touch ${HOME}/.gitconfig
        touch ${HOME}/.gitconfig_global

    - name: Ensure File System is Writable by the Container
      run: |
        sudo chmod -R 777 .

    - name: Build Container
      run: |
        docker-compose build
        docker-compose up -d

    - name: Run Linter
      run: |
        docker-compose exec -T {{cookiecutter.project_slug}} bash -l -c 'scripts/commander.sh lint-validate'

    - name: Run Sec Test
      run: |
        docker-compose exec -T {{cookiecutter.project_slug}} bash -l -c 'scripts/commander.sh sectest'

    - name: Run Unit Tests
      run: |
        docker-compose exec -T {{cookiecutter.project_slug}} bash -l -c 'scripts/commander.sh test coverage'

    - name: Report Job Status
{% raw %}      if: ${{ failure() }}{% endraw %}
      run: |
        curl -X POST -H 'Content-type: application/json' --data '{"text":"{{cookiecutter.project_slug}}: build has failed!"}' "${WEBHOOK_URL}"
{% raw %}      env:
        WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}
{% endraw %}

    - name: Releases -- Detect A Release Tag
      if: contains(github.ref, '/tags/v') == true
      run: |
        git checkout .  # Reset file modes
        GIT_DIFF="$(git diff origin/master)"
        echo "GIT_DIFF=${GIT_DIFF}" >> $GITHUB_ENV

    - name: Releases -- Ignore Non-Release Tags and Branches
      if: contains(github.ref, '/tags/v') != true
      run: |
        GIT_DIFF="not a release"
        echo "GIT_DIFF=${GIT_DIFF}" >> $GITHUB_ENV

    - name: Releases -- Prepare Release Content
      if: env.GIT_DIFF == ''
      run: |
        echo "NEWTAG=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV
        echo "{}" > package.json

    - name: Production -- Generate Changelog
      if: env.GIT_DIFF == ''
      uses: scottbrenner/generate-changelog-action@master
      id: Changelog
{% raw %}       env:
       REPO: ${{ github.repository }}
{% endraw %}
    - name: Production -- Create Release
      if: env.GIT_DIFF == ''
      uses: actions/create-release@v1
{% raw %}      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ env.NEWTAG }}
        release_name: Release ${{ env.NEWTAG }}
        body: |
          ${{ steps.Changelog.outputs.changelog }}
          ## Deployment Checklist
          - [ ] Ensure unnecessary alerts are ignored/disabled
          - [ ] Use Admin environment to complete database migrations
        draft: true
        prerelease: false
{% endraw %}
    - name: Production -- Report Success
      if: env.GIT_DIFF == ''
      run: |
        curl -X POST -H 'Content-type: application/json' --data "{\"text\":\"{{cookiecutter.project_slug}}: automated release has been created for ${TAG}: https://github.com/{{cookiecutter.github_username}}/{{cookiecutter.image_name}}/releases\"}" "${WEBHOOK_URL}"
{% raw %}       env:
        WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}
        TAG: ${{ env.NEWTAG }}
{% endraw %}
    - name: Production -- Report Failure
      if: failure() == true && contains(github.ref, '/tags/v') == true
      run: |
        [[ -z ${GIT_DIFF} ]] && curl -X POST -H 'Content-type: application/json' --data '{"text":"{{cookiecutter.project_slug}}: automated production release has failed!"}' "${WEBHOOK_URL}"
{% raw %}       env:
        WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}
        GIT_DIFF: ${{ env.GIT_DIFF }}
{% endraw %}